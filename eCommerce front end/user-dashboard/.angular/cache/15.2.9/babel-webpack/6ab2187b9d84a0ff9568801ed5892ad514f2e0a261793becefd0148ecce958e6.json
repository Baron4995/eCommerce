{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.loggedIn = new BehaviorSubject(false);\n  }\n  get isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  logout() {\n    return this.loggedIn.next(false);\n  }\n  login() {\n    return this.loggedIn.next(true);\n  }\n  signIn(user) {\n    return this.httpClient.get(\"http://localhost:3000/users\");\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAMlD,OAAM,MAAOC,WAAW;EAItBC,YAAmBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;IAFrB,aAAQ,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;EAEV;EAE5C,IAAII,UAAU;IAEZ,OAAO,IAAI,CAACC,QAAQ,CAACC,YAAY,EAAE;EAErC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,KAAK,CAAC;EAClC;EAEAC,KAAK;IACH,OAAO,IAAI,CAACJ,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC;EACjC;EAEAE,MAAM,CAACC,IAAS;IACd,OAAO,IAAI,CAACR,UAAU,CAACS,GAAG,CAAS,6BAA6B,CAAC;EACnE;;AAtBWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["BehaviorSubject","AuthService","constructor","httpClient","isLoggedIn","loggedIn","asObservable","logout","next","login","signIn","user","get","factory","providedIn"],"sourceRoot":"","sources":["/Users/baron/Desktop/COMPUTER SCIENCE/eCommerce/user-dashboard/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private loggedIn = new BehaviorSubject<boolean>(false);\n\n  constructor(public httpClient:HttpClient) { }\n\n  get isLoggedIn():Observable<boolean>{\n    \n    return this.loggedIn.asObservable();\n\n  }\n\n  logout(){\n    return this.loggedIn.next(false);\n  }\n\n  login(){\n    return this.loggedIn.next(true);\n  }\n\n  signIn(user:User):Observable<User[]>{\n    return this.httpClient.get<User[]>(\"http://localhost:3000/users\");\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}